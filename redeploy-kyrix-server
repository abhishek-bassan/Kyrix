#!/bin/bash
# Google GCP note: to run, you must first create a kubernetes cluster with plenty of RAM - we use n1-standard-2 (7.5GB)
source docker-scripts/spinner.sh

echo "checking for Citus-on-Kubernetes and gathering connection info..."
source setup-citus-vars.env
source setup-bastion-vars.env
if [ "x$MASTER" = "x" ]; then
    echo "please run redeploy-citus to bring up the database. exiting..."
    exit 1
fi

echo "deleting existing deployment..."   # skip if not running
active=`kubectl get -o name pods,deployments,services,pvc | grep 'kyrix' | xargs echo`
for elem in $active; do
    if ((`echo $active | grep -c $elem` > 0 )); then kubectl delete $elem; echo "deleting $elem..."; fi
done
while [ 1 ]; do w=`kubectl get -o name pods,deployments,services,pvc | egrep kyrix|wc -l`; if [ $w = 0 ]; then break; fi; spin "waiting for $w kubernetes resources (pods, etc) to shut down"; done

kubectl create -f kyrix-deployment.yaml

while [ 1 ]; do w=`kubectl get pods -o wide | egrep "kyrix.+Running" |wc -l`; if [ $w = 1 ]; then break; fi; spin "waiting for kyrix kubernetes pod to start"; done

source setup-kyrix-vars.env

# expose early because it takes a while to allocate an external IP address
kubectl expose replicaset.apps/$RS_KYRIX --type=LoadBalancer --name=kyrixserver --port=8000 --target-port=8000

# development
if [ "x$DEV" = "x1" ]; then
    # provide telnet, ping, emacs
    echo "recreating nba db..."
    recreatedb-kyrix
    echo "adding dev tools on the kyrix server..."
    kubectl exec -it $KYRIX -- apk add -y bash busybox-extras emacs > /dev/null 2>&1
    echo "copying tile-server code..."
    cat docker-scripts/start-kyrix.sh | kubectl exec -i $KYRIX -- sh -c "cat > /start-kyrix.sh; chmod 755 /start-kyrix.sh"
    tar cf - tile-server/src | kubectl exec -it $KYRIX -- sh -c "cd ..; tar xvf -"
    echo "recompiling tile-server code..."
    kubectl exec -it $KYRIX -- bash -c 'cd /kyrix/tile-server; mvn -B -Dorg.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=warn compile | tee mvn-compile.out >/dev/null 2>&1'
fi

# note: DBTYPE=psql is safe, but won't distribute the data across the Citus cluster, i.e. it'll use local tables on the master Citus node only.
kubectl exec -it $KYRIX -- sh -c "cd /kyrix/back-end; DBTYPE=citus PGHOST=master POSTGRES_PASSWORD=kyrixftw USERNAME=kyrix USER_PASSWORD=kyrix_password /wait-for-postgres master:5432 -t 60 -- /start-kyrix.sh" &

while [ 1 ]; do ip=`kubectl get services -o wide | grep kyrixserver | awk '{print $4}'`; if [ $ip != '<pending>' ]; then break; fi; spin "waiting for external IP"; done

source setup-kyrix-vars.env

wait
echo "Kyrix running; run 'source setup-kyrix-vars.env' for convenience scripts/functions or visit http://$KYRIX_IP:8000/"

exit 0
